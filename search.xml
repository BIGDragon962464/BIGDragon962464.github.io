<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CentOS Docker 安装</title>
      <link href="/2024/04/21/CentOS-Docker-%E5%AE%89%E8%A3%85/"/>
      <url>/2024/04/21/CentOS-Docker-%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>Docker 支持以下的 64 位 CentOS 版本：</p><ul><li>CentOS 7</li><li>CentOS 8</li><li>更高版本…</li></ul><hr><h2 id="使用官方安装脚本自动安装"><a href="#使用官方安装脚本自动安装" class="headerlink" title="使用官方安装脚本自动安装"></a>使用官方安装脚本自动安装</h2><p>安装命令如下：<br><code>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</code><br>也可以使用国内 daocloud 一键安装命令：<br><code>curl -sSL https://get.daocloud.io/docker | sh</code></p><hr><h2 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h2><h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><p>较旧的 Docker 版本称为 docker 或 docker-engine 。如果已安装这些程序，请卸载它们以及相关的依赖项。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> sudo yum remove docker \</span><br><span class="line">docker<span class="literal">-client</span> \</span><br><span class="line">docker<span class="literal">-client-latest</span> \</span><br><span class="line">docker<span class="literal">-common</span> \</span><br><span class="line">docker<span class="literal">-latest</span> \</span><br><span class="line">docker<span class="literal">-latest-logrotate</span> \</span><br><span class="line">docker<span class="literal">-logrotate</span> \</span><br><span class="line">docker<span class="literal">-engine</span></span><br></pre></td></tr></table></figure><h3 id="安装-Docker-Engine-Community"><a href="#安装-Docker-Engine-Community" class="headerlink" title="安装 Docker Engine-Community"></a>安装 Docker Engine-Community</h3><h3 id="使用-Docker-仓库进行安装"><a href="#使用-Docker-仓库进行安装" class="headerlink" title="使用 Docker 仓库进行安装"></a>使用 Docker 仓库进行安装</h3><p>在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker。<br><strong>设置仓库</strong><br>安装所需的软件包。yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> sudo yum install <span class="literal">-y</span> yum<span class="literal">-utils</span> \</span><br><span class="line">device<span class="literal">-mapper-persistent-data</span> \</span><br><span class="line">lvm2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用以下命令来设置稳定的仓库。</p><h3 id="使用官方源地址（比较慢）"><a href="#使用官方源地址（比较慢）" class="headerlink" title="使用官方源地址（比较慢）"></a>使用官方源地址（比较慢）</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> sudo yum<span class="literal">-config-manager</span> \</span><br><span class="line"><span class="literal">--add-repo</span> \</span><br><span class="line">https://download.docker.com/linux/centos/docker<span class="literal">-ce</span>.repo</span><br></pre></td></tr></table></figure><p>可以选择国内的一些源地址：</p><h3 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> sudo yum<span class="literal">-config-manager</span> \</span><br><span class="line"> <span class="literal">--add-repo</span> \</span><br><span class="line">http://mirrors.aliyun.com/docker<span class="literal">-ce</span>/linux/centos/docker<span class="literal">-ce</span>.repo</span><br></pre></td></tr></table></figure><h3 id="清华大学源"><a href="#清华大学源" class="headerlink" title="清华大学源"></a>清华大学源</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> sudo yum<span class="literal">-config-manager</span> \</span><br><span class="line"><span class="literal">--add-repo</span> \</span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/docker<span class="literal">-ce</span>/linux/centos/docker<span class="literal">-ce</span>.repo</span><br></pre></td></tr></table></figure><h2 id="安装-Docker-Engine-Community-1"><a href="#安装-Docker-Engine-Community-1" class="headerlink" title="安装 Docker Engine-Community"></a>安装 Docker Engine-Community</h2><p>安装最新版本的 Docker Engine-Community 和 containerd，或者转到下一步安装特定版本：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> sudo yum install docker<span class="literal">-ce</span> docker<span class="literal">-ce-cli</span> containerd.io docker<span class="literal">-compose-plugin</span></span><br></pre></td></tr></table></figure><p>如果提示您接受 GPG 密钥，请选是。<br><em><strong>有多个 Docker 仓库吗？</strong></em><br><em>如果启用了多个 Docker 仓库，则在未在 yum install 或 yum update 命令中指定版本的情况下，进行的安装或更新将始终安装最高版本，这可能不适合您的稳定性需求。</em><br>Docker 安装完默认未启动。并且已经创建好 docker 用户组，但该用户组下没有用户。<br><strong>要安装特定版本的 Docker Engine-Community，请在存储库中列出可用版本，然后选择并安装：</strong><br>1、列出并排序您存储库中可用的版本。此示例按版本号（从高到低）对结果进行排序。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> yum list docker<span class="literal">-ce</span> <span class="literal">--showduplicates</span> | <span class="built_in">sort</span> <span class="literal">-r</span></span><br><span class="line"></span><br><span class="line">docker<span class="literal">-ce</span>.x86_64  <span class="number">3</span>:<span class="number">18.09</span>.<span class="number">1</span><span class="literal">-3</span>.el7                     docker<span class="literal">-ce-stable</span></span><br><span class="line">docker<span class="literal">-ce</span>.x86_64  <span class="number">3</span>:<span class="number">18.09</span>.<span class="number">0</span><span class="literal">-3</span>.el7                     docker<span class="literal">-ce-stable</span></span><br><span class="line">docker<span class="literal">-ce</span>.x86_64  <span class="number">18.06</span>.<span class="number">1</span>.ce<span class="literal">-3</span>.el7                    docker<span class="literal">-ce-stable</span></span><br><span class="line">docker<span class="literal">-ce</span>.x86_64  <span class="number">18.06</span>.<span class="number">0</span>.ce<span class="literal">-3</span>.el7                    docker<span class="literal">-ce-stable</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、通过其完整的软件包名称安装特定版本，该软件包名称是软件包名称（docker-ce）加上版本字符串（第二列），从第一个冒号（:）一直到第一个连字符，并用连字符（-）分隔。例如：docker-ce-18.09.1。<br><code>$ sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</code></p><h2 id="启动-Docker。"><a href="#启动-Docker。" class="headerlink" title="启动 Docker。"></a>启动 Docker。</h2><p><code>$ sudo systemctl start docker</code><br>验证是否安装成功<br><code>$ docker version</code><br>Docker需要用户具有sudo权限，为了避免每次命令都输入sudo,可以把用户加入Docker用户组<br>(官方文档)。<br><code>$ sudo usermod -aG docker $USER</code><br>通过运行 hello-world 镜像来验证是否正确安装了 Docker Engine-Community 。<br><code>$ sudo docker run hello-world</code><br>开机自启动<br><code>$ systemctl enable docker</code></p><h2 id="卸载-docker"><a href="#卸载-docker" class="headerlink" title="卸载 docker"></a>卸载 docker</h2><p>删除安装包：<br><code>yum remove docker-ce</code><br>删除镜像、容器、配置文件等内容：<br><code>rm -rf /var/lib/docker</code></p><h2 id="查看所有已创建的docker容器"><a href="#查看所有已创建的docker容器" class="headerlink" title="查看所有已创建的docker容器"></a>查看所有已创建的docker容器</h2><p><code>docker ps -a</code><br>删除未运行的容器<br><code>sudo docker rm $(sudo docker ps -a -q)</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git本地项目上传Gitee仓库</title>
      <link href="/2024/04/21/Git%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0Gitee%E4%BB%93%E5%BA%93/"/>
      <url>/2024/04/21/Git%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0Gitee%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>参考： <a href="https://blog.csdn.net/weixin_46508271/article/details/121202829">https://blog.csdn.net/weixin_46508271/article/details/121202829</a></p><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><ol><li><p>本地电脑安装 Git 客户端</p></li><li><p>本地已有项目</p></li><li><p>Gitee 注册好了账户</p></li></ol><h3 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h3><h4 id="1-、登录码云"><a href="#1-、登录码云" class="headerlink" title="1 、登录码云"></a>1 、登录码云</h4><p><a href="https://gitee.com/">https://gitee.com</a><br>点击个人头像旁边的加号，选择新建仓库<br><img src="202308100942680.png" alt="image.png"></p><h4 id="2-、填写相关信息"><a href="#2-、填写相关信息" class="headerlink" title="2 、填写相关信息"></a>2 、填写相关信息</h4><p><img src="202308100943260.png" alt="image.png"><br>创建后得到远程仓库：<br><img src="202308100943379.png" alt="image.png"></p><h4 id="3-、在本地项目文件夹右击鼠标点击-Git-Bash-Here"><a href="#3-、在本地项目文件夹右击鼠标点击-Git-Bash-Here" class="headerlink" title="3 、在本地项目文件夹右击鼠标点击 Git Bash Here"></a>3 、在本地项目文件夹右击鼠标点击 Git Bash Here</h4><h4 id="4-、输入-git-init，这个目录变成-git-可以管理的仓库，会出现一个-Git-文件夹，如果没出现的话需要选择“显示隐藏文件”（不会的同学自行百度一下）"><a href="#4-、输入-git-init，这个目录变成-git-可以管理的仓库，会出现一个-Git-文件夹，如果没出现的话需要选择“显示隐藏文件”（不会的同学自行百度一下）" class="headerlink" title="4 、输入 git init，这个目录变成 git 可以管理的仓库，会出现一个. Git 文件夹，如果没出现的话需要选择“显示隐藏文件”（不会的同学自行百度一下）"></a>4 、输入<code> git init</code>，这个目录变成 git 可以管理的仓库，会出现一个. Git 文件夹，如果没出现的话需要选择“显示隐藏文件”（不会的同学自行百度一下）</h4><p><img src="202308100944023.png" alt="image.png"></p><h4 id="5-、绑定本地仓库与远程仓库：git-remote-add-origin-远程仓库的具体地址"><a href="#5-、绑定本地仓库与远程仓库：git-remote-add-origin-远程仓库的具体地址" class="headerlink" title="5 、绑定本地仓库与远程仓库：git remote add origin [远程仓库的具体地址]"></a>5 、绑定本地仓库与远程仓库：<code>git remote add origin [远程仓库的具体地址]</code></h4><p><img src="202308100944486.png" alt="image.png"></p><h4 id="6-、添加文件到暂存区：git-add-注意后面的点表示目录下的所有文件，点前面还有一个空格不要漏掉了"><a href="#6-、添加文件到暂存区：git-add-注意后面的点表示目录下的所有文件，点前面还有一个空格不要漏掉了" class="headerlink" title="6 、添加文件到暂存区：git add .(注意后面的点表示目录下的所有文件，点前面还有一个空格不要漏掉了)"></a>6 、添加文件到暂存区：<code>git add .</code>(注意后面的点表示目录下的所有文件，点前面还有一个空格不要漏掉了)</h4><h4 id="7-、将暂存区的文件提交至仓库中：git-commit-m-本次的提交信息"><a href="#7-、将暂存区的文件提交至仓库中：git-commit-m-本次的提交信息" class="headerlink" title="7 、将暂存区的文件提交至仓库中：git commit -m &#39;本次的提交信息&#39;"></a>7 、将暂存区的文件提交至仓库中：<code>git commit -m &#39;本次的提交信息&#39;</code></h4><h4 id="8-、远程库与本地同步合并，-git-pull-origin-master"><a href="#8-、远程库与本地同步合并，-git-pull-origin-master" class="headerlink" title="8 、远程库与本地同步合并， git pull origin master"></a>8 、远程库与本地同步合并， <code>git pull origin master</code></h4><p>注意，此处可能会报错：fatal: refusing to merge unrelated histories<br><img src="202308100944830.png" alt="image.png"></p><p>问题产生原因：本地库和远程库没有相关性，然后本地要去推送到远端，远端觉得这个本地库跟自己不相干，所以告知无法合并。<br>解决方法：操作命令后面加 –allow-unrelated-histories 变为：<br><code>git pull origin master --allow-unrelated-histories</code></p><h4 id="9、-将本地的分支版本上传到远程并合并-git-push-origin-master"><a href="#9、-将本地的分支版本上传到远程并合并-git-push-origin-master" class="headerlink" title="9、 将本地的分支版本上传到远程并合并: git push origin master"></a>9、 将本地的分支版本上传到远程并合并: <code>git push origin master</code></h4><p><img src="202308100944280.png" alt="image.png"></p><h4 id="10、大功告成"><a href="#10、大功告成" class="headerlink" title="10、大功告成"></a>10、大功告成</h4><p><img src="202308100945666.png" alt="image.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
