<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PC Android 屏幕自适应</title>
      <link href="/2024/04/21/PC%20Android%20%E5%B1%8F%E5%B9%95%E8%87%AA%E9%80%82%E5%BA%94/"/>
      <url>/2024/04/21/PC%20Android%20%E5%B1%8F%E5%B9%95%E8%87%AA%E9%80%82%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<h4 id="安装-lib-flexible"><a href="#安装-lib-flexible" class="headerlink" title="安装 lib-flexible"></a>安装 lib-flexible</h4><p><code>npm install lib-flexible --save-dev</code></p><h4 id="引入-lib-flexible"><a href="#引入-lib-flexible" class="headerlink" title="引入 lib-flexible"></a>引入 lib-flexible</h4><p>在main.js中引入lib-flexible</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// px2rem 自适应</span><br><span class="line">import &#x27;lib-flexible&#x27;</span><br></pre></td></tr></table></figure><h4 id="安装-postcss-pxtorem"><a href="#安装-postcss-pxtorem" class="headerlink" title="安装 postcss-pxtorem"></a>安装 postcss-pxtorem</h4><p><code>npm install postcss-pxtorem --save-dev</code></p><h4 id="配置postcss-pxtorem"><a href="#配置postcss-pxtorem" class="headerlink" title="配置postcss-pxtorem"></a>配置postcss-pxtorem</h4><p>在项目根目录新建文件vue.config.js，然后如下配置：<br>注意脚手架不同，postcss版本也会不同，配置方法会有些许差异，不然会报错！！<br>vue脚手架4用的（vue-cli@4）<br>vue.config.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 适配不同屏幕</span></span><br><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>); <span class="comment">//根据浏览器适配css，自动加前缀，不用可以删除</span></span><br><span class="line"><span class="keyword">const</span> pxtorem = <span class="built_in">require</span>(<span class="string">&#x27;postcss-pxtorem&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">//postcss-pxtorem</span></span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">loaderOptions</span>: &#123;</span><br><span class="line">      <span class="attr">css</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">postcss</span>: &#123;</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">          <span class="title function_">autoprefixer</span>(),</span><br><span class="line">          <span class="title function_">pxtorem</span>(&#123;</span><br><span class="line">            <span class="attr">rootValue</span>: <span class="number">37.5</span>,  <span class="comment">//手机设计稿宽度为375px的</span></span><br><span class="line">            <span class="attr">propList</span>: [<span class="string">&#x27;*&#x27;</span>], <span class="comment">//属性的选择器，*表示通用</span></span><br><span class="line">            <span class="attr">exclude</span>: <span class="regexp">/web/i</span>, <span class="comment">//忽略web下的所有文件</span></span><br><span class="line">            <span class="attr">selectorBlackList</span>: [<span class="string">&#x27;.a-&#x27;</span>] <span class="comment">// 过滤掉.a- 开头的class，不进行rem转换</span></span><br><span class="line">          &#125;),</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>vue脚手架5用的（vue-cli@5）<br>vue.config.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 适配不同屏幕</span></span><br><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>); <span class="comment">//根据浏览器适配css，自动加前缀，不用可以删除</span></span><br><span class="line"><span class="keyword">const</span> pxtorem = <span class="built_in">require</span>(<span class="string">&#x27;postcss-pxtorem&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">//postcss-pxtorem</span></span><br><span class="line">    <span class="attr">css</span>: &#123;</span><br><span class="line">        <span class="attr">loaderOptions</span>: &#123;</span><br><span class="line">            <span class="attr">css</span>: &#123;&#125;,</span><br><span class="line">            <span class="attr">postcss</span>: &#123;</span><br><span class="line">                <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">                    <span class="attr">plugins</span>: [</span><br><span class="line">                        <span class="title function_">autoprefixer</span>(),</span><br><span class="line">                        <span class="title function_">pxtorem</span>(&#123;</span><br><span class="line">                           <span class="attr">rootValue</span>: <span class="number">37.5</span>,  <span class="comment">//手机设计稿宽度为375px的</span></span><br><span class="line">                           <span class="attr">propList</span>: [<span class="string">&#x27;*&#x27;</span>], <span class="comment">//属性的选择器，*表示通用</span></span><br><span class="line">                           <span class="attr">exclude</span>: <span class="regexp">/web/i</span>, <span class="comment">//忽略web下的所有文件</span></span><br><span class="line">                           <span class="attr">selectorBlackList</span>: [<span class="string">&#x27;.a-&#x27;</span>] <span class="comment">// 过滤掉.a- 开头的class，不进行rem转换</span></span><br><span class="line">                        &#125;),</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p> 如果想ios，ipad，iPod设备无效</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在index.html中添加如下代码</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="regexp">/(pad|pod|iPad|iPod|iOS)/i</span>.<span class="title function_">test</span>(navigator.<span class="property">userAgent</span>)&amp;&amp;(head=<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;head&#x27;</span>),viewport=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;meta&#x27;</span>),viewport.<span class="property">name</span>=<span class="string">&#x27;viewport&#x27;</span>,viewport.<span class="property">content</span>=<span class="string">&#x27;target-densitydpi=device-dpi, width=480px, user-scalable=no&#x27;</span>,head.<span class="property">length</span>&gt;<span class="number">0</span>&amp;&amp;head[head.<span class="property">length</span>-<span class="number">1</span>].<span class="title function_">appendChild</span>(viewport));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="配置pc自适应"><a href="#配置pc自适应" class="headerlink" title="配置pc自适应"></a>配置pc自适应</h4><p>修改flexble.js,（npm安装的位置在node_modules&#x2F;lib-flexble&#x2F;），建议拉出来单独引用<br>修改前：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">refreshRem</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> width = docEl.<span class="title function_">getBoundingClientRect</span>().<span class="property">width</span>;</span><br><span class="line">    <span class="keyword">if</span> (width / dpr &gt; <span class="number">540</span>) &#123;</span><br><span class="line">        width = <span class="number">540</span> * dpr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> rem = width / <span class="number">10</span>;</span><br><span class="line">    docEl.<span class="property">style</span>.<span class="property">fontSize</span> = rem + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    flexible.<span class="property">rem</span> = win.<span class="property">rem</span> = rem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">refreshRem</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> width = docEl.<span class="title function_">getBoundingClientRect</span>().<span class="property">width</span>;</span><br><span class="line">        <span class="keyword">if</span> (width / dpr &gt; <span class="number">770</span>) &#123; <span class="comment">//大于770像素时，改变自适应策略，改成手机设计稿大小</span></span><br><span class="line">            width = width * dpr / <span class="number">5.12</span>; </span><br><span class="line">            <span class="comment">//520改成width 以pc上也能自适应</span></span><br><span class="line">            <span class="comment">// 5.12(pc设计稿除以手机，1920/350=5.12)，如果只写电脑 就不需要加</span></span><br><span class="line">            <span class="comment">//因为rem设置的是手机的设计稿换算的，只能在font-size上动手脚</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> rem = width / <span class="number">10</span>;</span><br><span class="line">        docEl.<span class="property">style</span>.<span class="property">fontSize</span> = rem + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        flexible.<span class="property">rem</span> = win.<span class="property">rem</span> = rem;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebSocket 网页版在线聊天</title>
      <link href="/2024/04/21/WebSocket%20%E7%BD%91%E9%A1%B5%E7%89%88%E5%9C%A8%E7%BA%BF%E8%81%8A%E5%A4%A9/"/>
      <url>/2024/04/21/WebSocket%20%E7%BD%91%E9%A1%B5%E7%89%88%E5%9C%A8%E7%BA%BF%E8%81%8A%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<h6 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  &lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h6 id="新建WebSocketConfig-java"><a href="#新建WebSocketConfig-java" class="headerlink" title="新建WebSocketConfig.java"></a>新建WebSocketConfig.java</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.standard.ServerEndpointExporter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入一个ServerEndpointExporter，该Bean会自动注册使用<span class="doctag">@ServerEndpoint</span>注解中声明的websocket endpoint</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServerEndpointExporter <span class="title function_">serverEndpointExporter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServerEndpointExporter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="新建-component文件夹-新建WebSocketServer-java文件"><a href="#新建-component文件夹-新建WebSocketServer-java文件" class="headerlink" title="新建 component文件夹  新建WebSocketServer.java文件"></a>新建 component文件夹  新建WebSocketServer.java文件</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONArray;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.*;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.PathParam;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> websocket服务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ServerEndpoint(value = &quot;/imserver/&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketServer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(WebSocketServer.class);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  记录当前在线连接数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Session&gt; sessionMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接建立成功调用的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOpen</span><span class="params">(Session session, <span class="meta">@PathParam(&quot;username&quot;)</span> String username)</span> &#123;</span><br><span class="line">        sessionMap.put(username, session);</span><br><span class="line">        log.info(<span class="string">&quot;有新用户加入，username=&#123;&#125;, 当前在线人数为：&#123;&#125;&quot;</span>, username, sessionMap.size());</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">array</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">        result.set(<span class="string">&quot;users&quot;</span>, array);</span><br><span class="line">        <span class="keyword">for</span> (Object key : sessionMap.keySet()) &#123;</span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">            jsonObject.set(<span class="string">&quot;username&quot;</span>, key);</span><br><span class="line">            <span class="comment">// &#123;&quot;username&quot;, &quot;zhang&quot;, &quot;username&quot;: &quot;admin&quot;&#125;</span></span><br><span class="line">             array.add(jsonObject);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="comment">//&#123;&quot;users&quot;: [&#123;&quot;username&quot;: &quot;zhang&quot;&#125;,&#123; &quot;username&quot;: &quot;admin&quot;&#125;]&#125;</span></span><br><span class="line">            sendAllMessage(JSONUtil.toJsonStr(result));  <span class="comment">//后台发送消息给所有的客户端</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接关闭调用的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClose</span><span class="params">(Session session, <span class="meta">@PathParam(&quot;username&quot;)</span> String username)</span> &#123;</span><br><span class="line">        sessionMap.remove(username);</span><br><span class="line">        log.info(<span class="string">&quot;有一连接关闭，移除username=&#123;&#125;的用户session, 当前在线人数为：&#123;&#125;&quot;</span>, username, sessionMap.size());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收到客户端消息后调用的方法</span></span><br><span class="line"><span class="comment">     * 后台收到客户端发送过来的消息</span></span><br><span class="line"><span class="comment">     * onMessage 是一个消息的中转站</span></span><br><span class="line"><span class="comment">     * 接受 浏览器端 socket.send 发送过来的 json数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 客户端发送过来的消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(String message, Session session, <span class="meta">@PathParam(&quot;username&quot;)</span> String username)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;服务端收到用户username=&#123;&#125;的消息:&#123;&#125;&quot;</span>, username, message);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">obj</span> <span class="operator">=</span> JSONUtil.parseObj(message);</span><br><span class="line">        <span class="type">String</span> <span class="variable">toUsername</span> <span class="operator">=</span> obj.getStr(<span class="string">&quot;to&quot;</span>); <span class="comment">// to表示发送给哪个用户，比如 admin</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> obj.getStr(<span class="string">&quot;text&quot;</span>); <span class="comment">// 发送的消息文本  hello</span></span><br><span class="line">        <span class="comment">// &#123;&quot;to&quot;: &quot;admin&quot;, &quot;text&quot;: &quot;聊天文本&quot;&#125;</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">toSession</span> <span class="operator">=</span> sessionMap.get(toUsername); <span class="comment">// 根据 to用户名来获取 session，再通过session发送消息文本</span></span><br><span class="line">        <span class="keyword">if</span> (toSession != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 服务器端 再把消息组装一下，组装后的消息包含发送人和发送的文本内容</span></span><br><span class="line">            <span class="comment">// &#123;&quot;from&quot;: &quot;zhang&quot;, &quot;text&quot;: &quot;hello&quot;&#125;</span></span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">            jsonObject.set(<span class="string">&quot;from&quot;</span>, username);  <span class="comment">// from 是 zhang</span></span><br><span class="line">            jsonObject.set(<span class="string">&quot;text&quot;</span>, text);  <span class="comment">// text 同上面的text</span></span><br><span class="line">            <span class="built_in">this</span>.sendMessage(jsonObject.toString(), toSession);</span><br><span class="line">            log.info(<span class="string">&quot;发送给用户username=&#123;&#125;，消息：&#123;&#125;&quot;</span>, toUsername, jsonObject.toString());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;发送失败，未找到用户username=&#123;&#125;的session&quot;</span>, toUsername);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Session session, Throwable error)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;发生错误&quot;</span>);        error.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务端发送消息给客户端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message, Session toSession)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;服务端给客户端[&#123;&#125;]发送消息&#123;&#125;&quot;</span>, toSession.getId(), message);</span><br><span class="line">            toSession.getBasicRemote().sendText(message);        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;服务端发送消息给客户端失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务端发送消息给所有客户端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendAllMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Session session : sessionMap.values()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;服务端给客户端[&#123;&#125;]发送消息&#123;&#125;&quot;</span>, session.getId(), message);</span><br><span class="line">                session.getBasicRemote().sendText(message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;服务端发送消息给客户端失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="前端配置Message-vue"><a href="#前端配置Message-vue" class="headerlink" title="前端配置Message.vue"></a>前端配置Message.vue</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding: 10px; margin-bottom: 50px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-card</span> <span class="attr">style</span>=<span class="string">&quot;width: 300px; height: 300px; color: #333&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding-bottom: 10px; border-bottom: 1px solid #ccc&quot;</span>&gt;</span>在线用户</span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 12px&quot;</span>&gt;</span>（点击聊天气泡开始聊天）<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding: 10px 0&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;user in users&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;user.username&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; user.username &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-chat-dot-round&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 10px; font-size: 16px; cursor: pointer&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;chatUser = user.username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 12px;color: limegreen; margin-left: 5px&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;user.username === chatUser&quot;</span>&gt;</span>chatting...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 800px; margin: 0 auto; background-color: white; border-radius: 5px; box-shadow: 0 0 10px #ccc&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center; line-height: 50px;&quot;</span>&gt;</span>            Web聊天室（&#123;&#123; chatUser &#125;&#125;）</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 350px; overflow:auto; border-top: 1px solid #ccc&quot;</span> <span class="attr">v-html</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 200px&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 160px; width: 100%; padding: 20px; border: none; border-top: 1px solid #ccc; border-bottom: 1px solid #ccc; outline: none&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: right; padding-right: 10px&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;send&quot;</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&quot;@/utils/request&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> socket;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&quot;Im&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">circleUrl</span>: <span class="string">&#x27;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">user</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isCollapse</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">users</span>: [],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">chatUser</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">text</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">messages</span>: [],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">content</span>: <span class="string">&#x27;&#x27;</span>    &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="title function_">init</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">send</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">chatUser</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.$message(&#123;<span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span>, <span class="attr">message</span>: <span class="string">&quot;请选择聊天对象&quot;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">text</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.$message(&#123;<span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span>, <span class="attr">message</span>: <span class="string">&quot;请输入内容&quot;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="keyword">typeof</span> (<span class="title class_">WebSocket</span>) == <span class="string">&quot;undefined&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;您的浏览器不支持WebSocket&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;您的浏览器支持WebSocket&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 组装待发送的消息 json</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// &#123;&quot;from&quot;: &quot;zhang&quot;, &quot;to&quot;: &quot;admin&quot;, &quot;text&quot;: &quot;聊天文本&quot;&#125;</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> message = &#123;<span class="attr">from</span>: <span class="variable language_">this</span>.<span class="property">user</span>.<span class="property">username</span>, <span class="attr">to</span>: <span class="variable language_">this</span>.<span class="property">chatUser</span>, <span class="attr">text</span>: <span class="variable language_">this</span>.<span class="property">text</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                    socket.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(message));</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 将组装好的json发送给服务端，由服务端进行转发</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">messages</span>.<span class="title function_">push</span>(&#123;<span class="attr">user</span>: <span class="variable language_">this</span>.<span class="property">user</span>.<span class="property">username</span>, <span class="attr">text</span>: <span class="variable language_">this</span>.<span class="property">text</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 构建消息内容，本人消息</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="title function_">createContent</span>(<span class="literal">null</span>, <span class="variable language_">this</span>.<span class="property">user</span>.<span class="property">username</span>, <span class="variable language_">this</span>.<span class="property">text</span>)</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">text</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">createContent</span>(<span class="params">remoteUser, nowUser, text</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 这个方法是用来将 json的聊天消息数据转换成 html的。</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> html</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 当前用户消息</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (nowUser) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// nowUser 表示是否显示当前用户发送的聊天消息，绿色气泡</span></span></span><br><span class="line"><span class="language-javascript">                html =</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;&lt;div class=\&quot;el-row\&quot; style=\&quot;padding: 5px 0\&quot;&gt;\n&quot;</span> +            <span class="string">&quot;  &quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;   &lt;div class=\&quot;el-col el-col-22\&quot; style=\&quot;text-align: right; padding-right: 10px\&quot;&gt;\n&quot;</span> +            <span class="string">&quot;    &quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;       &lt;div class=\&quot;tip left\&quot;&gt;&quot;</span> + text + <span class="string">&quot;&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;       &lt;/div&gt;\n&quot;</span> +            <span class="string">&quot;  &quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;   &lt;/div&gt;\n&quot;</span> +            <span class="string">&quot;  &quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;   &lt;div class=\&quot;el-col el-col-2\&quot;&gt;\n&quot;</span> +            <span class="string">&quot;  &quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;       &lt;span class=\&quot;el-avatar el-avatar--circle\&quot; style=\&quot;height: 40px; width: 40px; line-height: 40px;\&quot;&gt;\n&quot;</span> +            <span class="string">&quot;    &quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;           &lt;img src=\&quot;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\&quot; style=\&quot;object-fit: cover;\&quot;&gt;\n&quot;</span> +            <span class="string">&quot;  &quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;       &lt;/span&gt;\n&quot;</span> +            <span class="string">&quot;  &quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;   &lt;/div&gt;\n&quot;</span> +            <span class="string">&quot;&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;&lt;/div&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (remoteUser) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// remoteUser表示远程用户聊天消息，蓝色的气泡</span></span></span><br><span class="line"><span class="language-javascript">                html =</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;&lt;div class=\&quot;el-row\&quot; style=\&quot;padding: 5px 0\&quot;&gt;\n&quot;</span> +            <span class="string">&quot;  &quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;   &lt;div class=\&quot;el-col el-col-2\&quot; style=\&quot;text-align: right\&quot;&gt;\n&quot;</span> +            <span class="string">&quot;  &quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;       &lt;span class=\&quot;el-avatar el-avatar--circle\&quot; style=\&quot;height: 40px; width: 40px; line-height: 40px;\&quot;&gt;\n&quot;</span> +            <span class="string">&quot;    &quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;           &lt;img src=\&quot;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\&quot; style=\&quot;object-fit: cover;\&quot;&gt;\n&quot;</span> +            <span class="string">&quot;  &quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;       &lt;/span&gt;\n&quot;</span> +            <span class="string">&quot;  &quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;   &lt;/div&gt;\n&quot;</span> +            <span class="string">&quot;  &quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;   &lt;div class=\&quot;el-col el-col-22\&quot; style=\&quot;text-align: left; padding-left: 10px\&quot;&gt;\n&quot;</span> +            <span class="string">&quot;    &quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;       &lt;div class=\&quot;tip right\&quot;&gt;&quot;</span> + text + <span class="string">&quot;&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;       &lt;/div&gt;\n&quot;</span> +            <span class="string">&quot;  &quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;   &lt;/div&gt;\n&quot;</span> +            <span class="string">&quot;&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;&lt;/div&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(html)</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">content</span> += html;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">init</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">user</span> = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;user&quot;</span>) ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;user&quot;</span>)) : &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> username = <span class="variable language_">this</span>.<span class="property">user</span>.<span class="property">username</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> _this = <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="keyword">typeof</span> (<span class="title class_">WebSocket</span>) == <span class="string">&quot;undefined&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;您的浏览器不支持WebSocket&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;您的浏览器支持WebSocket&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> socketUrl = <span class="string">&quot;ws://localhost:8088/imserver/&quot;</span> + username;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (socket != <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    socket.<span class="title function_">close</span>();</span></span><br><span class="line"><span class="language-javascript">                    socket = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 开启一个websocket服务</span></span></span><br><span class="line"><span class="language-javascript">                socket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(socketUrl);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//打开事件</span></span></span><br><span class="line"><span class="language-javascript">                socket.<span class="property">onopen</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;websocket已打开&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//  浏览器端收消息，获得从服务端发送过来的文本消息</span></span></span><br><span class="line"><span class="language-javascript">                socket.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">msg</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;收到数据====&quot;</span> + msg.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(msg.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 对收到的json数据进行解析， 类似这样的： &#123;&quot;users&quot;: [&#123;&quot;username&quot;: &quot;zhang&quot;&#125;,&#123; &quot;username&quot;: &quot;admin&quot;&#125;]&#125;</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (data.<span class="property">users</span>) &#123;<span class="comment">// 获取在线人员信息</span></span></span><br><span class="line"><span class="language-javascript">                    _this.<span class="property">users</span> = data.<span class="property">users</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">username</span> !== username)<span class="comment">// 获取当前连接的所有用户信息，并且排除自身，自己不会出现在自己的聊天列表里</span></span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 如果服务器端发送过来的json数据 不包含 users 这个key，那么发送过来的就是聊天文本json数据</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//  // &#123;&quot;from&quot;: &quot;zhang&quot;, &quot;text&quot;: &quot;hello&quot;&#125;</span></span></span><br><span class="line"><span class="language-javascript">                      <span class="keyword">if</span> (data.<span class="property">from</span> === _this.<span class="property">chatUser</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                          _this.<span class="property">messages</span>.<span class="title function_">push</span>(data)</span></span><br><span class="line"><span class="language-javascript">                          <span class="comment">// 构建消息内容</span></span></span><br><span class="line"><span class="language-javascript">                          _this.<span class="title function_">createContent</span>(data.<span class="property">from</span>, <span class="literal">null</span>, data.<span class="property">text</span>)</span></span><br><span class="line"><span class="language-javascript">                      &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//关闭事件</span></span></span><br><span class="line"><span class="language-javascript">                socket.<span class="property">onclose</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;websocket已关闭&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//发生了错误事件</span></span></span><br><span class="line"><span class="language-javascript">                socket.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;websocket发生了错误&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.tip</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-family</span>: sans-serif;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">10px</span>;  <span class="attribute">width</span>:auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>:inline-block <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>:inline;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: deepskyblue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">     <span class="attribute">background-color</span>: forestgreen;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="配置路由然后启动即可"><a href="#配置路由然后启动即可" class="headerlink" title="配置路由然后启动即可"></a>配置路由然后启动即可</h6>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 安装 Nginx</title>
      <link href="/2024/04/21/Linux%20%E5%AE%89%E8%A3%85%20Nginx/"/>
      <url>/2024/04/21/Linux%20%E5%AE%89%E8%A3%85%20Nginx/</url>
      
        <content type="html"><![CDATA[<h6 id="1-安装依赖和相关库："><a href="#1-安装依赖和相关库：" class="headerlink" title="1.安装依赖和相关库："></a>1.安装依赖和相关库：</h6><p><code>yum -y install gcc-c++ zlib-devel openssl-devel libtool</code></p><h6 id="2-下载nginx安装包并解压："><a href="#2-下载nginx安装包并解压：" class="headerlink" title="2.下载nginx安装包并解压："></a>2.下载nginx安装包并解压：</h6><p><code>cd /usr/local</code><br><code>wget http://nginx.org/download/nginx-1.14.0.tar.gz</code><br><code>tar -zxvf nginx-1.14.0.tar.gz</code></p><h6 id="3-配置和安装"><a href="#3-配置和安装" class="headerlink" title="3.配置和安装"></a>3.配置和安装</h6><p><code>cd nginx-1.14.0</code><br><code>./configure --prefix=/usr/local/nginx</code><br><code>make &amp;&amp; make install</code></p><h6 id="4-启动Nginx："><a href="#4-启动Nginx：" class="headerlink" title="4.启动Nginx："></a>4.启动Nginx：</h6><p><code>cd ../nginx/sbin</code><br><code>./nginx</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础</title>
      <link href="/2024/04/21/Linux%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/04/21/Linux%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h6 id="赋予权限"><a href="#赋予权限" class="headerlink" title="赋予权限"></a>赋予权限</h6><p><code>chmod 777 *</code></p><h6 id="查询服务"><a href="#查询服务" class="headerlink" title="查询服务"></a>查询服务</h6><p><code>ps -ef | grep +服务名</code></p><h6 id="关闭进程"><a href="#关闭进程" class="headerlink" title="关闭进程"></a>关闭进程</h6><p><code>kill -9 +进程号</code></p><h6 id="查看端口号"><a href="#查看端口号" class="headerlink" title="查看端口号"></a>查看端口号</h6><p><code>netstat -tunlp</code></p><h6 id="筛选端口号查询"><a href="#筛选端口号查询" class="headerlink" title="筛选端口号查询"></a>筛选端口号查询</h6><p><code>netstat -tnlp | grep :80</code></p><h6 id="准确查找端口号"><a href="#准确查找端口号" class="headerlink" title="准确查找端口号"></a>准确查找端口号</h6><p><code>netstat -apn | grep 9090</code></p><h6 id="关闭端口号"><a href="#关闭端口号" class="headerlink" title="关闭端口号"></a>关闭端口号</h6><p><code>sudo fuser -k -n tcp 9090</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux运行Spring</title>
      <link href="/2024/04/21/Linux%E8%BF%90%E8%A1%8CSpring/"/>
      <url>/2024/04/21/Linux%E8%BF%90%E8%A1%8CSpring/</url>
      
        <content type="html"><![CDATA[<p><code>nohup java -jar ***.jar &amp;</code><br><code>tailf nohup.out</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 安装MySQL</title>
      <link href="/2024/04/21/Docker%20%E5%AE%89%E8%A3%85MySQL/"/>
      <url>/2024/04/21/Docker%20%E5%AE%89%E8%A3%85MySQL/</url>
      
        <content type="html"><![CDATA[<h6 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h6><p><code>docker pull mysql:8.0</code></p><h6 id="运行-Mysql-容器："><a href="#运行-Mysql-容器：" class="headerlink" title="运行 Mysql 容器："></a>运行 Mysql 容器：</h6><p><code>docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql:8.0</code></p><blockquote><p>MYSQL_ROOT_PASSWORD&#x3D;root Mysql数据库root的密码</p></blockquote><h6 id="进入Mysql容器"><a href="#进入Mysql容器" class="headerlink" title="进入Mysql容器"></a>进入Mysql容器</h6><p><code>docker exec -it 658072f495d7 /bin/bash</code><br>![image.png](.&#x2F;Docker 安装MySQL&#x2F;image.png)</p><h6 id="登录Mysql"><a href="#登录Mysql" class="headerlink" title="登录Mysql"></a>登录Mysql</h6><p><code>mysql -uroot -proot</code></p><h6 id="MySQL修改密码"><a href="#MySQL修改密码" class="headerlink" title="MySQL修改密码"></a>MySQL修改密码</h6><p><code>set password for root@localhost = password(&#39;root&#39;);</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/2024/04/21/Nginx/"/>
      <url>/2024/04/21/Nginx/</url>
      
        <content type="html"><![CDATA[<h3 id="1-nginx反向代理的好处："><a href="#1-nginx反向代理的好处：" class="headerlink" title="1. nginx反向代理的好处："></a>1. nginx反向代理的好处：</h3><ul><li>提高访问速度</li><li>进行负载均衡</li><li>保证后端服务安全<br><img src="202309061715979.png" alt="image.png"></li></ul><h3 id="2-nginx反向代理的配置方式："><a href="#2-nginx反向代理的配置方式：" class="headerlink" title="2. nginx反向代理的配置方式："></a>2. nginx反向代理的配置方式：</h3><p>nginx.conf文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name localhost;</span><br><span class="line"></span><br><span class="line">location /api/&#123;</span><br><span class="line">  proxy_pass http://localhost:8080/admin/;  #反向代理</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-nginx负载均衡的配置方式："><a href="#3-nginx负载均衡的配置方式：" class="headerlink" title="3. nginx负载均衡的配置方式："></a>3. nginx负载均衡的配置方式：</h3><p>nginx.conf文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream webservers&#123;</span><br><span class="line">server 192.168.100.128:8080;</span><br><span class="line">server 192.168.100.129:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name localhost;</span><br><span class="line"></span><br><span class="line">location /api/&#123;</span><br><span class="line">  proxy_pass http://localhost:8080/admin/;  #负载均衡</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h5><h6 id="进入目录"><a href="#进入目录" class="headerlink" title="进入目录"></a>进入目录</h6><p><code>cd /usr/local/nginx/sbin </code></p><h6 id="启动nginx-1"><a href="#启动nginx-1" class="headerlink" title="启动nginx"></a>启动nginx</h6><p><code>./nginx</code></p><h5 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h5><p><code>./nginx -s reload</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS Docker 安装</title>
      <link href="/2024/04/21/CentOS-Docker-%E5%AE%89%E8%A3%85/"/>
      <url>/2024/04/21/CentOS-Docker-%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>Docker 支持以下的 64 位 CentOS 版本：</p><ul><li>CentOS 7</li><li>CentOS 8</li><li>更高版本…</li></ul><hr><h2 id="使用官方安装脚本自动安装"><a href="#使用官方安装脚本自动安装" class="headerlink" title="使用官方安装脚本自动安装"></a>使用官方安装脚本自动安装</h2><p>安装命令如下：<br><code>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</code><br>也可以使用国内 daocloud 一键安装命令：<br><code>curl -sSL https://get.daocloud.io/docker | sh</code></p><hr><h2 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h2><h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><p>较旧的 Docker 版本称为 docker 或 docker-engine 。如果已安装这些程序，请卸载它们以及相关的依赖项。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> sudo yum remove docker \</span><br><span class="line">docker<span class="literal">-client</span> \</span><br><span class="line">docker<span class="literal">-client-latest</span> \</span><br><span class="line">docker<span class="literal">-common</span> \</span><br><span class="line">docker<span class="literal">-latest</span> \</span><br><span class="line">docker<span class="literal">-latest-logrotate</span> \</span><br><span class="line">docker<span class="literal">-logrotate</span> \</span><br><span class="line">docker<span class="literal">-engine</span></span><br></pre></td></tr></table></figure><h3 id="安装-Docker-Engine-Community"><a href="#安装-Docker-Engine-Community" class="headerlink" title="安装 Docker Engine-Community"></a>安装 Docker Engine-Community</h3><h3 id="使用-Docker-仓库进行安装"><a href="#使用-Docker-仓库进行安装" class="headerlink" title="使用 Docker 仓库进行安装"></a>使用 Docker 仓库进行安装</h3><p>在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker。<br><strong>设置仓库</strong><br>安装所需的软件包。yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> sudo yum install <span class="literal">-y</span> yum<span class="literal">-utils</span> \</span><br><span class="line">device<span class="literal">-mapper-persistent-data</span> \</span><br><span class="line">lvm2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用以下命令来设置稳定的仓库。</p><h3 id="使用官方源地址（比较慢）"><a href="#使用官方源地址（比较慢）" class="headerlink" title="使用官方源地址（比较慢）"></a>使用官方源地址（比较慢）</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> sudo yum<span class="literal">-config-manager</span> \</span><br><span class="line"><span class="literal">--add-repo</span> \</span><br><span class="line">https://download.docker.com/linux/centos/docker<span class="literal">-ce</span>.repo</span><br></pre></td></tr></table></figure><p>可以选择国内的一些源地址：</p><h3 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> sudo yum<span class="literal">-config-manager</span> \</span><br><span class="line"> <span class="literal">--add-repo</span> \</span><br><span class="line">http://mirrors.aliyun.com/docker<span class="literal">-ce</span>/linux/centos/docker<span class="literal">-ce</span>.repo</span><br></pre></td></tr></table></figure><h3 id="清华大学源"><a href="#清华大学源" class="headerlink" title="清华大学源"></a>清华大学源</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> sudo yum<span class="literal">-config-manager</span> \</span><br><span class="line"><span class="literal">--add-repo</span> \</span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/docker<span class="literal">-ce</span>/linux/centos/docker<span class="literal">-ce</span>.repo</span><br></pre></td></tr></table></figure><h2 id="安装-Docker-Engine-Community-1"><a href="#安装-Docker-Engine-Community-1" class="headerlink" title="安装 Docker Engine-Community"></a>安装 Docker Engine-Community</h2><p>安装最新版本的 Docker Engine-Community 和 containerd，或者转到下一步安装特定版本：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> sudo yum install docker<span class="literal">-ce</span> docker<span class="literal">-ce-cli</span> containerd.io docker<span class="literal">-compose-plugin</span></span><br></pre></td></tr></table></figure><p>如果提示您接受 GPG 密钥，请选是。<br><em><strong>有多个 Docker 仓库吗？</strong></em><br><em>如果启用了多个 Docker 仓库，则在未在 yum install 或 yum update 命令中指定版本的情况下，进行的安装或更新将始终安装最高版本，这可能不适合您的稳定性需求。</em><br>Docker 安装完默认未启动。并且已经创建好 docker 用户组，但该用户组下没有用户。<br><strong>要安装特定版本的 Docker Engine-Community，请在存储库中列出可用版本，然后选择并安装：</strong><br>1、列出并排序您存储库中可用的版本。此示例按版本号（从高到低）对结果进行排序。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> yum list docker<span class="literal">-ce</span> <span class="literal">--showduplicates</span> | <span class="built_in">sort</span> <span class="literal">-r</span></span><br><span class="line"></span><br><span class="line">docker<span class="literal">-ce</span>.x86_64  <span class="number">3</span>:<span class="number">18.09</span>.<span class="number">1</span><span class="literal">-3</span>.el7                     docker<span class="literal">-ce-stable</span></span><br><span class="line">docker<span class="literal">-ce</span>.x86_64  <span class="number">3</span>:<span class="number">18.09</span>.<span class="number">0</span><span class="literal">-3</span>.el7                     docker<span class="literal">-ce-stable</span></span><br><span class="line">docker<span class="literal">-ce</span>.x86_64  <span class="number">18.06</span>.<span class="number">1</span>.ce<span class="literal">-3</span>.el7                    docker<span class="literal">-ce-stable</span></span><br><span class="line">docker<span class="literal">-ce</span>.x86_64  <span class="number">18.06</span>.<span class="number">0</span>.ce<span class="literal">-3</span>.el7                    docker<span class="literal">-ce-stable</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、通过其完整的软件包名称安装特定版本，该软件包名称是软件包名称（docker-ce）加上版本字符串（第二列），从第一个冒号（:）一直到第一个连字符，并用连字符（-）分隔。例如：docker-ce-18.09.1。<br><code>$ sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</code></p><h2 id="启动-Docker。"><a href="#启动-Docker。" class="headerlink" title="启动 Docker。"></a>启动 Docker。</h2><p><code>$ sudo systemctl start docker</code><br>验证是否安装成功<br><code>$ docker version</code><br>Docker需要用户具有sudo权限，为了避免每次命令都输入sudo,可以把用户加入Docker用户组<br>(官方文档)。<br><code>$ sudo usermod -aG docker $USER</code><br>通过运行 hello-world 镜像来验证是否正确安装了 Docker Engine-Community 。<br><code>$ sudo docker run hello-world</code><br>开机自启动<br><code>$ systemctl enable docker</code></p><h2 id="卸载-docker"><a href="#卸载-docker" class="headerlink" title="卸载 docker"></a>卸载 docker</h2><p>删除安装包：<br><code>yum remove docker-ce</code><br>删除镜像、容器、配置文件等内容：<br><code>rm -rf /var/lib/docker</code></p><h2 id="查看所有已创建的docker容器"><a href="#查看所有已创建的docker容器" class="headerlink" title="查看所有已创建的docker容器"></a>查看所有已创建的docker容器</h2><p><code>docker ps -a</code><br>删除未运行的容器<br><code>sudo docker rm $(sudo docker ps -a -q)</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旧笔记本化身 HTPC——打造一台优雅的家庭娱乐主机</title>
      <link href="/2024/04/21/%E6%97%A7%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%8C%96%E8%BA%AB%20HTPC%E2%80%94%E2%80%94%E6%89%93%E9%80%A0%E4%B8%80%E5%8F%B0%E4%BC%98%E9%9B%85%E7%9A%84%E5%AE%B6%E5%BA%AD%E5%A8%B1%E4%B9%90%E4%B8%BB%E6%9C%BA/"/>
      <url>/2024/04/21/%E6%97%A7%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%8C%96%E8%BA%AB%20HTPC%E2%80%94%E2%80%94%E6%89%93%E9%80%A0%E4%B8%80%E5%8F%B0%E4%BC%98%E9%9B%85%E7%9A%84%E5%AE%B6%E5%BA%AD%E5%A8%B1%E4%B9%90%E4%B8%BB%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><p><a href="https://www.msi.cn/Desktop/MAG-Trident-S-5M/support#utility">https://www.msi.cn/Desktop/MAG-Trident-S-5M/support#utility</a><br>![image.png](.&#x2F;旧笔记本化身 HTPC——打造一台优雅的家庭娱乐主机&#x2F;202308141101653.png)</p><h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>自从搬进这个出租屋后，我就一直想把这台屋子自带的电视用起来，虽然现在已经几乎不会去看电视台的节目了，但是每当吃饭时刷刷 B 站或者追剧时，总会觉得电脑显示器还是不够舒适，偶尔下班打个游戏也觉得端坐在电脑桌前很痛苦。</p><p>仔细想想，除了玩游戏或者有重型生产需求，自己生活中的大部分娱乐场景都可以用一台智能电视解决。但考虑到租房自带电视素质普遍比较辣鸡，甚至很多根本就不是所谓的智能电视，想要升级体验，似乎只能通过电视盒子这一条老路了。</p><p>——但真的是这样吗？</p><h2 id="电视盒子的尝试"><a href="#电视盒子的尝试" class="headerlink" title="电视盒子的尝试"></a>电视盒子的尝试</h2><p>出于对这台辣鸡电视的尊重，我一开始给他搭配了一台廉价的小米盒子。但是使用之后我才发现，显然小米电视的系统辣鸡是有所传承的——开机广告，龟速启动以及各种会员广告，唯一的优点似乎就是用小米手机遥控非常方便了。在原版系统和刷机系统都尝试过一遍后，我放弃了这条「歪路」。正当我考虑要不要买一个 Apple TV 时，HTPC 这个概念进入了我的视野。</p><h2 id="什么是HTPC"><a href="#什么是HTPC" class="headerlink" title="什么是HTPC"></a>什么是HTPC</h2><p><img src="https://cdn.sspai.com/2023/07/30/aa9eb1ad5d5d0bf6f3e04c62976273fd.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1"></p><p>HTPC 可以理解为上个世纪微软这一票电脑系统厂家搞得家庭影音系统。大概类似如今的 Android TV系统，当年用一台个人电脑连接大屏幕影音娱乐大概也是一件很酷的事情。于是放在客厅的电脑——HTPC 诞生了。</p><p>然而几年之后，随着互联网的飞速发展，无数安卓系统的智能电视横空出世，再加上流媒体的爆发，看电视已经不再是大多数人唯一的客厅娱乐方式了。投屏刷剧、大屏游戏、客厅健身，电视似乎回归了一台大尺寸显示器的本质，但是作为显示源的主机却没有一个完美的选择，手机投屏刷剧会被封，大屏游戏的话电视性能又实在令人着急，就连看似完美的 Apple TV 也有网络环境这个大门坎以及封闭生态的问题。而 HTPC——直接在客厅摆一台电脑，这种简单粗暴的解决方法，则可以完美解决以上所有问题吗？</p><h2 id="HTPC-对现有问题的探索"><a href="#HTPC-对现有问题的探索" class="headerlink" title="HTPC 对现有问题的探索"></a>HTPC 对现有问题的探索</h2><p>首先回溯 HTPC 的历史。这玩意的概念在中文互联网兴起都可以追溯到 2008⁠–2009年了，这个陈旧的概念是怎么在爱奇艺因为禁止投屏而成为众矢之的的节骨眼上成为各大迷你 PC厂家的软文中心思想的暂且不提，作为一个「电视」系统，其最重要的 [遥控] 与 [媒体中心] 两个部分确是基本已经脱离了时代。</p><p>[遥控] 是 HTPC 的硬件部分，在早年的 Windows 是有家庭媒体中心遥控器这种官方硬件支持的，但是早就不兼容现在的新软件了。而软件部分的 [媒体中心] 就更为悲惨，Win 端的硕果仅存就只有 <a href="https://sspai.com/link?target=https://kodi.tv/">Kodi</a> 了，而用过 Kodi 的同学应该都了解，这个软件更适合你把他当作一个单纯的「影音中心」（虽然 HTPC 的本义也确实是家庭影院电脑），但是现在在当下我们对一台巨型机顶盒的要求可不只是看看下载好的电影或剧集这么简单。而 Kodi 古早的操作界面，对于我这种数字颜狗来说也有点无法接受……</p><p>从控制方式入手，遥控器行不通之后，可能大部分人就会想到无线键鼠了，更不要说早年间各大键盘厂家都推出过多媒体键盘这么一个奇葩物件，但是在实际体验之后我想说，用键盘操控电视真的是一件很蠢的事情。首先，当你坐在沙发里的时候，大部分人都希望用最少的操作来让自己尽快进入到一个娱乐的状态，而没有人会希望在这种情况下用鼠标瞄准，用键盘输入，事实上很多智能电视 app 都尽可能地把自己的输入框设置成了首字母联想输入，这一切都是为了让你少按几次按键。而这个时候，我们就该学学当前的家庭娱乐中心—— Xbox 了。没错，手柄才是正解啊！它兼具方向选择与多个菜单键、确认键，甚至还可以外接小键盘打字。作为一个优秀的人体工学遥控器，游戏手柄无论是兼容性还是操作舒适性在硬件上都比普通遥控器高了不知道几个档次。</p><p>再看回媒体中心，我们之前提到了当前家庭娱乐媒体中心的定义并不是一个类 Kodi 的纯媒体中心。而对我来说，我需要的其实就是在大屏幕上刷刷 B 站、打打游戏、看看电影、听听网易云，这些事情看似都属于传统媒体，但都属于强联网的流媒体应用，对于 Win 庞大的软件资源来说，我们其实只需要一个把这些软件集合在一起的启动器就行了。那么问题就简化了，我们只需要找到一款支持完美手柄操作的 UI 漂亮的 Win 软件启动器就行了，但是这种软件存在吗？</p><h2 id="MSI-Game-Stadium-方案"><a href="#MSI-Game-Stadium-方案" class="headerlink" title="MSI Game Stadium 方案"></a>MSI Game Stadium 方案</h2><p><img src="https://cdn.sspai.com/2023/07/30/9a5695ca49e9d1b41c87d85a3879089b.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1"></p><p>2022 年，赶上迷你主机热潮与疫情带来的游戏机持续畅销，微星也推出了自家的迷你主机 MAG Trident S 5M，这款主机与当时市面上的其他游戏主机不同，发售之初主打的就是云游戏与手游方向，而这两个方向让这款 PC 往 Xbox 的方向无限靠拢，以至于微星在这台机器上搭载了一个类似于 Steam 大屏幕模式的启动器——MSI Game Stadium。</p><p><img src="https://cdn.sspai.com/2023/07/30/c494c8d6df5e78de5b4b373d8d3f912e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1"></p><p><img src="https://cdn.sspai.com/2023/07/30/662e6f4c04efa56d9b094cf3f519cdf7.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1"></p><p>MSI Game Stadium 在初始状态下就自带了一个 Xbox 云游戏网页、Steam 桌面版以及一个套壳的蓝叠模拟器三个快捷方式，而良心的地方来了，这个启动器是可以随意添加第三方应用的，同时它完美支持手柄控制，完美到什么程度呢，它可以同时兼具在菜单界面的方向键操作与传统软件里的精准指针操作。当你处在 MSI Game Stadium 界面内时，所有操作都可以通过方向键来实现，就如同你操作 Xbox 主机一样，而当你进入了第三方 app 之后，只需同时按下 Back 加右摇杆即可开启鼠标模式，左摇杆控制鼠标指针，右摇杆控制鼠标滚轮，AB 为左右键，按下左摇杆还可呼出屏幕键盘，这简直比电视遥控还要符合「沙发人体工学」。</p><p><img src="https://cdn.sspai.com/2023/07/30/a23b34fb8471e1207e48be948164c55b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1"></p><p>再说回应用快捷方式，MSI Game Stadium 支持添加任何快捷方式，所以你可以把任何的桌面程序添加进启动器内，通过手柄方向键就可以选择启动，体验与安卓的智能电视别无二致。我在这里添加了以下三类应用：</p><p><strong>影音类</strong>：Bilibili UWP、Potplayer、网易云音乐</p><p>这三个软件都不支持手柄操作，需要使用鼠标模式，不过使用体验也可以接受</p><p><strong>游戏类</strong>：MSI APP Player、Steam、Steamlink、Moonlight</p><p>前三个都支持手柄操作，其中 MSI APP Player 是一个安卓游戏模拟器，可以玩一些安卓手游，而 Moonlight 与 Steamlink 类似，使用上不如 Steamlink 方便，但是个人感觉效果好一些。</p><p><strong>工具类</strong>：Edge、Xbox 云游戏</p><p>通过以上这些快捷方式，可以覆盖我 90% 的大屏幕使用场景，而作为这套系统系统的载体，我选择了我的一台 6 年前购买的 小米 Air 轻薄本。由于对性能的需求我早已换成了台式机作为主力机使用，这台轻薄本在我结束学业之后，也只是作为出差时的便携电脑，平时利用率很低，通过 Windows 自带的用户管理，我划分出一个 HTPC 专用的用户及桌面，与工作桌面区分开，这样在我没有出差时，这台旧笔记本就可以作为 HTPC 来使用。而且我还可以通过串流以及 SMB 随时访问我主力的台式机上的游戏、性能以及影视资源，而我的旧笔记本则无需占用任何性能以及储存空间，只用安安静静的做好他的本职工作即可。</p><p><img src="https://cdn.sspai.com/2023/07/30/cecc0b5966907547c416429299623230.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1"></p><p>除了软件方面的调整，我还把我的笔记本设置成了合盖模式，即关闭笔记本盖子也不会进入睡眠模式，这部分的调整需要在 [控制面板-硬件与声音-电源选项-选择关闭笔记本计算机盖的功能] 中进行调整。同时，合盖后对大部分笔记本的散热都有一定的影响，加上对于一个 24 小时在线的 HTPC 来说，高能耗也不太合理，我们也可以通过 [能源之星] 和 [自定义电源计划] 的方式对电脑的功耗进行优化。其中能源之星可以在 Microsoft Store 中直接下载，该软件可以调用 Win 11 自带的效率模式对待机的不活跃程序进行休眠，类似 iOS 的墓碑机制。而自定义电源计划则较为复杂，建议<a href="https://www.bilibili.com/read/cv18942103">参考此教程</a> ；自定义电源计划可以调用 Windows 隐藏的电源机制，虽然操作复杂，但是可以将整机功耗降低至 5w 左右的同时保持 4K 视频流畅播放，效果非常明显。低功耗下笔记本的主动散热基本也会转为被动散热，对于环境噪音优化也是很有帮助的。</p><h2 id="实际使用体验"><a href="#实际使用体验" class="headerlink" title="实际使用体验"></a>实际使用体验</h2><p><img src="https://cdn.sspai.com/2023/07/30/b1a06dc81f9e060cdc0b5a245b9432d9.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1"></p><p>在经过了一年的使用之后，我依旧在使用这套自己混搭的 HTPC 系统，每日回家之后，在沙发上拿起手柄看两集曼达洛人、刷刷 B 站、玩一会星际拓荒，大屏幕一定程度上治好了我坐在显示器前的电子阳痿，并且这套开放且自由的 HTPC 系统也让我不用再被各种体验 bug 和性能瓶颈所所困扰。一定程度上来说，它甚至成为了我主力台式机的一个轻量化替身，当我只是想看看网页、看看 Apple Music 的屏幕歌词时，它永远和我的沙发以及手柄一起 24 小时待命。</p><p>如果一定要说有什么不足的地方，那就是小米笔记本在合盖时无法使用电源键唤醒，而这款电脑在 bios 里又不支持来电自启或者 wol 唤醒，所以我只能让他 24 小时待机了。不过考虑到 5w 的功耗，以及并没有任何额外的运行噪声，也还在接受范围内。如果你采用的设备带有 wol 唤醒，就可以考虑与智能家居做进一步的联动了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是一篇同时针对旧电脑利用与当前 HTPC 系统搭建的探索，如果你需要一台 HTPC，一台过时的计算机或许就能完全胜任这个工作，毕竟计算机发展以及进入了性能过剩的时期，尤其是对于一个 HTPC 来说；而 Windows 的开放性会让你体验到智能电视给不了的自由度，尤其是搭配本文中提到的一系列软件与优化。言而总之，本文提到的这种利用方式依然是当下 HTPC 系统的最低成本的尝试了。如果你正巧需要一个优雅的家庭娱乐主机，不妨一试。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 新奇妙招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抖音无水印解析（扩展名改为html即可食用）</title>
      <link href="/2024/04/21/%E6%8A%96%E9%9F%B3%E6%97%A0%E6%B0%B4%E5%8D%B0%E8%A7%A3%E6%9E%90%EF%BC%88%E6%89%A9%E5%B1%95%E5%90%8D%E6%94%B9%E4%B8%BAhtml%E5%8D%B3%E5%8F%AF%E9%A3%9F%E7%94%A8%EF%BC%89/"/>
      <url>/2024/04/21/%E6%8A%96%E9%9F%B3%E6%97%A0%E6%B0%B4%E5%8D%B0%E8%A7%A3%E6%9E%90%EF%BC%88%E6%89%A9%E5%B1%95%E5%90%8D%E6%94%B9%E4%B8%BAhtml%E5%8D%B3%E5%8F%AF%E9%A3%9F%E7%94%A8%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html><head>    <meta charset="utf-8">    <title>抖音解析</title>    <meta name="renderer" content="webkit">    <meta name="referrer" content="never">    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">    <link href="https://cdn.bootcdn.net/ajax/libs/layui/2.7.6/css/layui.min.css" rel="stylesheet">    <script src="https://cdn.bootcdn.net/ajax/libs/layui/2.7.6/layui.min.js"></script></head><style>body {max-width: 500px;margin: auto;}.main {padding:6px 6px;margin:auto;background-color: white;}.tt {color: #1aa700;font-size: 1.2rem;font-weight: 700;padding: 8px;}.center {text-align: center;}</style><body>    <div class="main">        <blockquote class="layui-elem-quote tt">抖音解析</blockquote>        <div class="layui-row">            <div class="layui-col-md12">                <div class="layui-card-body" id="player" style="display: none;">                    <div class="layui-form-item" style="margin: 0 10px 10px 10px;">                        <video name="video" id="video" width="100%" controls autoplay loop></video>                    </div>                </div>            </div>            <div class="layui-col-md12">                <div class="layui-card-body">                    <form class="layui-form layui-form-pane" action>                        <div class="layui-form-item layui-form-text">                            <label class="layui-form-label">输入分享链接</label>                            <div class="layui-input-block">                            <textarea name="link" id="link" placeholder="请输入内容" class="layui-textarea">0.74 odN:/ 复制打开抖音，看看【饭思思的作品】# salt 艾瑞巴蒂嗨起来 https://v.douyin.com/6W4jytR/</textarea>                            </div>                        </div>                        <input type="text" name="downloadurl" style="display: none;">                        <input type="text" name="filename" style="display: none;">                        <div class="layui-form-item center">                        <button class="layui-btn" lay-submit lay-filter="Submit">提交</button>                        <button class="layui-btn" lay-submit lay-filter="Remove">再来一个</button>                        <button class="layui-btn" lay-submit id="download" style="display: none;" lay-filter="Download">下载</button>                        </div>                    </form>                </div>                <div id="Result" style="display: none;">                    <div class="layui-card-header">解析结果</div>                    <div class="layui-card-body">                        <div class="layui-field-box">                            <div style="margin-top: 0px;">                            <p><span class="layui-badge">uid</span> <span id="uid"></span></p>                            <p><span class="layui-badge">author</span> <span id="author"></span></p>                            <p><span class="layui-badge">create_time</span> <span id="create_time"></span></p>                            <p><span class="layui-badge">desc</span> <span id="desc"></span></p>                            <p><span class="layui-badge">video_id</span> <span id="video_id"></span></p>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></body><script>var content = navigator.clipboard.readText();console.log(content);layui.use(['form'], function(){    var form = layui.form    ,$ = layui.jquery    ,layer = layui.layer;<pre><code>form.on(&#39;submit(Submit)&#39;, function(data)&#123;    var link = data.field.link;    if(link.length == 0)&#123;        layer.alert(&#39;请输入您要解析的内容！&#39;, &#123; title: &#39;提示&#39; &#125;)        return false;    &#125;    var i = link.lastIndexOf(&quot;https://&quot;);    i = i === -1 ? link.lastIndexOf(&quot;http://&quot;) : i;    var url = link.substr(i);    var index = layer.load(0, &#123;shade: false&#125;);    $.ajax(&#123;        type: &#39;GET&#39;,          url: &#39;https://api.shejiz.cn/dy/&#39; + url,        success: function(s) &#123;            if(s.code === 0)&#123;                var filename = s.data.nickname + &#39;_&#39; + s.data.itemId;                var videourl = s.data.playAddr;                $(&#39;#author&#39;).html(s.data.nickname);                $(&#39;#uid&#39;).html(s.data.uid);                $(&#39;#create_time&#39;).html(s.data.createTime);                $(&#39;#desc&#39;).html(s.data.desc);                $(&#39;#video_id&#39;).html(s.data.video_id);                $(&#39;#title&#39;).html(filename);                $(&#39;#download&#39;).show();                $(&#39;#Result&#39;).show();                $(&#39;#vice&#39;).show();                downloadBlobFile(&#39;get&#39;,videourl).onreadystatechange = res=&gt;&#123;                    if(res.currentTarget.readyState == 4 &amp;&amp;  res.currentTarget.status==200)&#123;                        const url = window.URL.createObjectURL(res.currentTarget.response);                        $(&#39;#video&#39;).attr(&#39;src&#39;,url);$(&#39;#player&#39;).show();                        $(&quot;input[name=downloadurl]&quot;).val(url);                    &#125;                &#125;                $(&quot;input[name=filename]&quot;).val(filename);                document.title = filename;                                &#125;else&#123;                layer.msg(s.message);            &#125;            layer.close(index);        &#125;    &#125;);    return false;&#125;);form.on(&#39;submit(Remove)&#39;, function(data)&#123;    $(&quot;#Result&quot;).hide();    $(&quot;#link&quot;).val(&#39;&#39;);    $(&#39;#video&#39;).attr(&#39;src&#39;,&#39;&#39;);    $(&#39;#download&#39;).hide();    $(&#39;#player&#39;).hide();    $(&#39;#vice&#39;).hide();    return false;&#125;);form.on(&#39;submit(Download)&#39;, function(data)&#123;    downloadBlobFile(&#39;get&#39;,data.field.downloadurl).onreadystatechange = res=&gt;&#123;        if(res.currentTarget.readyState == 4 &amp;&amp;  res.currentTarget.status==200)&#123;            const url = window.URL.createObjectURL(res.currentTarget.response);            let a = document.createElement(&#39;a&#39;);            a.href=url;            a.download = data.field.filename;            a.click();        &#125;    &#125;    return false;&#125;);    </code></pre><p>});<br>function downloadBlobFile(_method,_url){<br>    const request &#x3D; new XMLHttpRequest();<br>    request.open(_method,_url);<br>    request.send();<br>    request.responseType &#x3D; ‘blob’;<br>    return request;<br>}<br></script><p></p></html>]]></content>
      
      
      
        <tags>
            
            <tag> 新奇妙招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打包进阿里云要改的代码</title>
      <link href="/2024/04/21/%E6%89%93%E5%8C%85%E8%BF%9B%E9%98%BF%E9%87%8C%E4%BA%91%E8%A6%81%E6%94%B9%E7%9A%84%E4%BB%A3%E7%A0%81/"/>
      <url>/2024/04/21/%E6%89%93%E5%8C%85%E8%BF%9B%E9%98%BF%E9%87%8C%E4%BA%91%E8%A6%81%E6%94%B9%E7%9A%84%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<ol><li>application.yml</li></ol><p><img src="image1.png" alt="image.png"><img src="image2.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/26726568/1682335513532-20fe7d4a-041f-4b91-8713-2efae403f621.png#averageHue=%23202327&clientId=u8a54ef20-6347-4&from=paste&height=142&id=u30a908e8&originHeight=177&originWidth=1309&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=41509&status=done&style=none&taskId=u2061a684-b60d-4c1c-b86f-fac43a1f5b1&title=&width=1047.2" alt="image.png"></p><ol start="2"><li>config.js</li></ol><p><img src="image3.png" alt="image.png"><br><img src="image4.png" alt="image.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 服务器部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue dist Nginx配置</title>
      <link href="/2024/04/21/Vue%20dist%20Nginx%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/04/21/Vue%20dist%20Nginx%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> localhost;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span> /home/server/dist;</span><br><span class="line">    <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> /api&#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://localhost:8088/;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git本地项目上传Gitee仓库</title>
      <link href="/2024/04/21/Git%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0Gitee%E4%BB%93%E5%BA%93/"/>
      <url>/2024/04/21/Git%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0Gitee%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>参考： <a href="https://blog.csdn.net/weixin_46508271/article/details/121202829">https://blog.csdn.net/weixin_46508271/article/details/121202829</a></p><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><ol><li><p>本地电脑安装 Git 客户端</p></li><li><p>本地已有项目</p></li><li><p>Gitee 注册好了账户</p></li></ol><h3 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h3><h4 id="1-、登录码云"><a href="#1-、登录码云" class="headerlink" title="1 、登录码云"></a>1 、登录码云</h4><p><a href="https://gitee.com/">https://gitee.com</a><br>点击个人头像旁边的加号，选择新建仓库<br><img src="202308100942680.png" alt="image.png"></p><h4 id="2-、填写相关信息"><a href="#2-、填写相关信息" class="headerlink" title="2 、填写相关信息"></a>2 、填写相关信息</h4><p><img src="202308100943260.png" alt="image.png"><br>创建后得到远程仓库：<br><img src="202308100943379.png" alt="image.png"></p><h4 id="3-、在本地项目文件夹右击鼠标点击-Git-Bash-Here"><a href="#3-、在本地项目文件夹右击鼠标点击-Git-Bash-Here" class="headerlink" title="3 、在本地项目文件夹右击鼠标点击 Git Bash Here"></a>3 、在本地项目文件夹右击鼠标点击 Git Bash Here</h4><h4 id="4-、输入-git-init，这个目录变成-git-可以管理的仓库，会出现一个-Git-文件夹，如果没出现的话需要选择“显示隐藏文件”（不会的同学自行百度一下）"><a href="#4-、输入-git-init，这个目录变成-git-可以管理的仓库，会出现一个-Git-文件夹，如果没出现的话需要选择“显示隐藏文件”（不会的同学自行百度一下）" class="headerlink" title="4 、输入 git init，这个目录变成 git 可以管理的仓库，会出现一个. Git 文件夹，如果没出现的话需要选择“显示隐藏文件”（不会的同学自行百度一下）"></a>4 、输入<code> git init</code>，这个目录变成 git 可以管理的仓库，会出现一个. Git 文件夹，如果没出现的话需要选择“显示隐藏文件”（不会的同学自行百度一下）</h4><p><img src="202308100944023.png" alt="image.png"></p><h4 id="5-、绑定本地仓库与远程仓库：git-remote-add-origin-远程仓库的具体地址"><a href="#5-、绑定本地仓库与远程仓库：git-remote-add-origin-远程仓库的具体地址" class="headerlink" title="5 、绑定本地仓库与远程仓库：git remote add origin [远程仓库的具体地址]"></a>5 、绑定本地仓库与远程仓库：<code>git remote add origin [远程仓库的具体地址]</code></h4><p><img src="202308100944486.png" alt="image.png"></p><h4 id="6-、添加文件到暂存区：git-add-注意后面的点表示目录下的所有文件，点前面还有一个空格不要漏掉了"><a href="#6-、添加文件到暂存区：git-add-注意后面的点表示目录下的所有文件，点前面还有一个空格不要漏掉了" class="headerlink" title="6 、添加文件到暂存区：git add .(注意后面的点表示目录下的所有文件，点前面还有一个空格不要漏掉了)"></a>6 、添加文件到暂存区：<code>git add .</code>(注意后面的点表示目录下的所有文件，点前面还有一个空格不要漏掉了)</h4><h4 id="7-、将暂存区的文件提交至仓库中：git-commit-m-本次的提交信息"><a href="#7-、将暂存区的文件提交至仓库中：git-commit-m-本次的提交信息" class="headerlink" title="7 、将暂存区的文件提交至仓库中：git commit -m &#39;本次的提交信息&#39;"></a>7 、将暂存区的文件提交至仓库中：<code>git commit -m &#39;本次的提交信息&#39;</code></h4><h4 id="8-、远程库与本地同步合并，-git-pull-origin-master"><a href="#8-、远程库与本地同步合并，-git-pull-origin-master" class="headerlink" title="8 、远程库与本地同步合并， git pull origin master"></a>8 、远程库与本地同步合并， <code>git pull origin master</code></h4><p>注意，此处可能会报错：fatal: refusing to merge unrelated histories<br><img src="202308100944830.png" alt="image.png"></p><p>问题产生原因：本地库和远程库没有相关性，然后本地要去推送到远端，远端觉得这个本地库跟自己不相干，所以告知无法合并。<br>解决方法：操作命令后面加 –allow-unrelated-histories 变为：<br><code>git pull origin master --allow-unrelated-histories</code></p><h4 id="9、-将本地的分支版本上传到远程并合并-git-push-origin-master"><a href="#9、-将本地的分支版本上传到远程并合并-git-push-origin-master" class="headerlink" title="9、 将本地的分支版本上传到远程并合并: git push origin master"></a>9、 将本地的分支版本上传到远程并合并: <code>git push origin master</code></h4><p><img src="202308100944280.png" alt="image.png"></p><h4 id="10、大功告成"><a href="#10、大功告成" class="headerlink" title="10、大功告成"></a>10、大功告成</h4><p><img src="202308100945666.png" alt="image.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
